Given two arrays a and b write a function comp(a, b) (compSame(a, b) in Clojure) that checks whether the two 
arrays have the "same" elements, with the same multiplicities. "Same" means, here, that the elements in b 
are the elements in a squared, regardless of the order.

Examples
Valid arrays
a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [121, 14641, 20736, 361, 25921, 361, 20736, 361]



function comp(arr1, arr2){
  if (arr1==null || arr2==null) return false	
	var sortedOne = arr1.sort((a, b)=>a-b); 
	var sortedTwo = arr2.map(a=>a*=1).sort((a, b)=>a-b, []);
	var sqrtTwo = sortedTwo.map(x=>Math.sqrt(x), []); 
	return  sortedOne.every((v, i, ar)=>ar[i]==sqrtTwo[i]); 
}
